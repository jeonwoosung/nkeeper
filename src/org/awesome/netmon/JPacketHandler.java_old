package org.jnetpcap.examples;

import java.io.File;
import java.io.FileInputStream;

import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.PcapPacketHandler;
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.protocol.tcpip.Tcp;

public class JPacketHandler implements PcapPacketHandler<String> {

	static boolean finNext = false;

	public void nextPacket(PcapPacket packet, String user) {

		Ip4 ip = packet.getHeader(new Ip4());
		Tcp tcp = packet.getHeader(new Tcp());
		try {

			ControlFlag flags = new ControlFlag(tcp.flags());

			if (tcp.destination() == 23 || tcp.source() == 23) {
				TcpIpSummary s = new TcpIpSummary(tcp, ip);

				System.out.println(s);

				if (tcp.destination() == 23 || tcp.flags_ACK()) {
					File f = new File("c:/1");
					FileInputStream fis = new FileInputStream(f);
					byte[] b = new byte[(int) f.length()];

					fis.read(b);
					
					PcapPacket finPacket = new PcapPacket(b);

					Ip4 finIp = packet.getHeader(new Ip4());
					
					finIp.destination(ip.destination());
					finIp.source(ip.source());
					
					Tcp finTcp = packet.getHeader(new Tcp());
					
					finTcp.destination(tcp.destination());
					finTcp.source(tcp.source());
					
					finTcp.flags_FIN(true);
					finTcp.flags_ACK(true);
					
//					finTcp.seq(s.getSeq());
//					finTcp.ack(s.getAck());
//					if(tcp.hasSubHeader(new Tcp.Timestamp())){
//						Tcp.Timestamp tsource = tcp.getSubHeader(new Tcp.Timestamp());
//						tsource.tsecr(s.getTsval());
//						
//					}
					
					finTcp.checksum(finTcp.calculateChecksum());

					
					tcp.checksum(tcp.calculateChecksum());
					ClassicPcapExample.pcap.sendPacket(finPacket);

				}

				if (tcp.source() == 23 || tcp.flags_FIN() || tcp.flags_ACK()) {
					tcp.flags_ACK(true);
					tcp.flags_FIN(false);
				}

			}

		} catch (Exception e) {
			if (!(e instanceof NullPointerException))
				e.printStackTrace();
		}

	}

	private String byteArraytoHexString(byte[] source) {
		StringBuffer ret = new StringBuffer();

		for (byte b : source) {
			String s = Integer.toHexString(b & 0xff);
			if (s.length() == 1)
				ret.append("0");
			ret.append(s);
			ret.append("-");
		}

		return ret.toString();
	}

}
